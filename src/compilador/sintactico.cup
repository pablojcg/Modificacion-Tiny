package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;

	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal FOR;
terminal NEQ;
terminal GRT;
terminal GRTEQ;
terminal LTEQ;
terminal AND;
terminal OR;
terminal COMA;
terminal EXPBOOL;
terminal INT;
terminal BOOL;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase tipo;
non terminal NodoBase tipo_var;
non terminal NodoBase arg;
non terminal NodoBase exp_d;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(modoDepuracion) System.out.println("\t regla 1");
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2a");
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}SEMI
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2b");
				RESULT=sent;
				:}SEMI
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a");
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b");
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3c");
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3d");
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3e");
					RESULT=sesc;
					:}
            | for_stmt:sfor      {: if(modoDepuracion) System.out.println("\t regla 3f");
					RESULT=sfor;
					:}
             | tipo:st      {: if(modoDepuracion) System.out.println("\t regla 3g");
					RESULT=st;
					:}                           
            | error	{: if(modoDepuracion) System.out.println("\t regla 3f");
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a");
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b");
		RESULT = new NodoIf(ex,pthen,pelse);
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5");
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

 tipo       ::= tipo_var:tipo                           {: if(modoDepuracion) System.out.println("\t regla 14");
							RESULT = tipo;
							:}
		;

 tipo_var ::= INT arg:ex SEMI	                        {: if(modoDepuracion) System.out.println("\t regla 14a");
							RESULT = ex;
							:}  
                
                | BOOL arg:ex SEMI                      {: if(modoDepuracion) System.out.println("\t regla 14b");
							RESULT = ex;
							:}
             
		;

  arg     ::= exp:ex COMA arg:ar 	                {: if(modoDepuracion) System.out.println("\t regla 14a");
							RESULT = new NodoArg(ex,ar);
							:}
           | exp:ex                                     {: if(modoDepuracion) System.out.println("\t regla 14a");
							RESULT = ex;
							:}
                ;


assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio");
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		;

read_stmt   ::= READ ID:variable	{: if(modoDepuracion) System.out.println("\t regla 7");
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(modoDepuracion) System.out.println("\t regla 8");
					RESULT= new NodoEscribir(ex);
					:}
		;

for_stmt    ::= FOR LPAREN exp:ex SEMI exp:exb SEMI  exp:exf RPAREN THEN stmt_seq:seq1 END
                                 {: if(modoDepuracion) System.out.println("\t regla 13a");
					RESULT= new NodoFor(ex,exb,exf,seq1);
					:}
              ;
exp         ::= exp_d:ex AND exp_d:ex2                  {: if(modoDepuracion) System.out.println("\t regla 9a");
							RESULT = new NodoOpeLo(ex,ex2);
							:}
                | exp_d:ex OR exp_d:ex2                     {: if(modoDepuracion) System.out.println("\t regla 9b");
							RESULT = new NodoOpeLo(ex,ex2);
							:}
                 | exp_d:ex                 {: if(modoDepuracion) System.out.println("\t regla 9b");
							RESULT = ex;
							:}
               ;

exp_d          ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9c");
							RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
							:}
                | simple_exp:exI GRT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9d");
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
                | simple_exp:exI LTEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9e");
							RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
							:}
                | simple_exp:exI GRTEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9f");
							RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
							:}
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9g");
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
                | simple_exp:exI NEQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9h");
							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							:}
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9i");
					RESULT = ex;
					:}                
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10a");
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b");
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla 10c");
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11a");
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b");
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11c");
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a");
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b");
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12c");
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
                | EXPBOOL:expb   {: if(modoDepuracion) System.out.println("\t regla 12b");
					System.out.println("Devolvi nodo valor booleano");
					if(expb!=null){
						RESULT= new NodoBool((Boolean)expb);
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}

		| error	{: if(modoDepuracion) System.out.println("\t regla 12d");
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}

                                    
		;